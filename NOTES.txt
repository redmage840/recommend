The similarity between two users is represented using a decimal number between -1.0 and 1.0. We will call this number the similarity index. Finally, the possibility of a user liking a movie will be represented using another decimal number between -1.0 and 1.0.

similarity of sets - s(A,B) == (A difference B) / (A intersection B)

However, the most important method of this class is “Similars#update()” which works by taking a user and computing a list of other users who are similar, and storing the list in the database, along with their similarity indices. (0 - 1)

The method that will compute these results is “Suggestions#update()”. This method, like “Similars#update()”, will take a user as an argument. The method begins by listing all the users similar to the given user, and all the items the given user has not rated:

Once we have all the other users and the unrated items listed, we can begin computing a new set of recommendations by removing any previous set of recommendations, iterating over each item, and computing the possibility of the user liking it based on available information:

links
https://beckernick.github.io/music_recommender/
https://cambridgespark.com/content/tutorials/implementing-your-own-recommender-systems-in-Python/index.html
https://scikit-learn.org/stable/tutorial/machine_learning_map/index.html
https://www.analyticsvidhya.com/blog/2016/06/quick-guide-build-recommendation-engine-python/
https://dataaspirant.com/2015/04/11/five-most-popular-similarity-measures-implementation-in-python/

LEARN THESE

- correlation coefficient
- sparse matrix
- cosine similarity aka dot product
- dimensionality reduction
- clustering algorithms
- tf-idf
- singular value decomposition
